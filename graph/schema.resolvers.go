package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"go-graphql/graph/model"
	"strings"

	"github.com/google/uuid"
)

// Create is the resolver for the create field.
func (r *mutationResolver) Create(ctx context.Context, product model.ProductInput) (*model.Product, error) {
	prdct := &model.Product{
		ID:    uuid.NewString(),
		Name:  product.Name,
		Stock: product.Stock,
		Price: product.Price,
	}

	r.products = append(r.products, prdct)
	return prdct, nil
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*model.Product, error) {
	return r.products, nil
}

// Search is the resolver for the search field.
func (r *queryResolver) Search(ctx context.Context, name string) (*model.Product, error) {
	prdctName := strings.ToLower(name)
	for _, x := range r.products {
		if strings.Contains(strings.ToLower(x.Name), prdctName) {
			return x, nil
		}
	}
	return nil, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
